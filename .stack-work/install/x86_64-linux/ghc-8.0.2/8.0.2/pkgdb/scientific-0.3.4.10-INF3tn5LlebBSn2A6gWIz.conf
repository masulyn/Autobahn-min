name: scientific
version: 0.3.4.10
id: scientific-0.3.4.10-INF3tn5LlebBSn2A6gWIz
key: scientific-0.3.4.10-INF3tn5LlebBSn2A6gWIz
license: BSD3
maintainer: Bas van Dijk <v.dijk.bas@gmail.com>
homepage: https://github.com/basvandijk/scientific
synopsis: Numbers represented using scientific notation
description:
    @Data.Scientific@ provides the number type 'Scientific'. Scientific numbers are
    arbitrary precision and space efficient. They are represented using
    <http://en.wikipedia.org/wiki/Scientific_notation scientific notation>.
    The implementation uses a coefficient @c :: 'Integer'@ and a base-10 exponent
    @e :: 'Int'@. A scientific number corresponds to the
    'Fractional' number: @'fromInteger' c * 10 '^^' e@.
    .
    Note that since we're using an 'Int' to represent the exponent these numbers
    aren't truly arbitrary precision. I intend to change the type of the exponent
    to 'Integer' in a future release.
    .
    The main application of 'Scientific' is to be used as the target of parsing
    arbitrary precision numbers coming from an untrusted source. The advantages
    over using 'Rational' for this are that:
    .
    * A 'Scientific' is more efficient to construct. Rational numbers need to be
    constructed using '%' which has to compute the 'gcd' of the 'numerator' and
    'denominator'.
    .
    * 'Scientific' is safe against numbers with huge exponents. For example:
    @1e1000000000 :: 'Rational'@ will fill up all space and crash your
    program. Scientific works as expected:
    .
    > > read "1e1000000000" :: Scientific
    > 1.0e1000000000
    .
    * Also, the space usage of converting scientific numbers with huge exponents to
    @'Integral's@ (like: 'Int') or @'RealFloat's@ (like: 'Double' or 'Float')
    will always be bounded by the target type.
category: Data
author: Bas van Dijk
exposed: True
exposed-modules:
    Data.ByteString.Builder.Scientific Data.Scientific
    Data.Text.Lazy.Builder.Scientific
hidden-modules: GHC.Integer.Compat Utils
abi: c2e8359222d7544b01db1db83c6217bf
trusted: False
import-dirs: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2/scientific-0.3.4.10-INF3tn5LlebBSn2A6gWIz
library-dirs: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2/scientific-0.3.4.10-INF3tn5LlebBSn2A6gWIz
dynamic-library-dirs: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/lib/x86_64-linux-ghc-8.0.2
data-dir: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/share/x86_64-linux-ghc-8.0.2/scientific-0.3.4.10
hs-libraries: HSscientific-0.3.4.10-INF3tn5LlebBSn2A6gWIz
depends:
    base-4.9.1.0 ghc-prim-0.5.0.0
    integer-logarithms-1-D0BB7zGq0kc2gMmYwjuxA6 deepseq-1.4.2.0
    text-1.2.2.1-FwvWBfkNJh1I1NMMegz0uY
    hashable-1.2.5.0-3jyU6ITgVDsZjJvM61wsx
    vector-0.11.0.0-LMwQhhnXj8U3T5Bm1JFxG containers-0.5.7.1
    binary-0.8.3.0 bytestring-0.10.8.1 integer-gmp-1.0.0.1
haddock-interfaces: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/doc/scientific-0.3.4.10/scientific.haddock
haddock-html: /r/autobahn/Autobahn-min-mar/.stack-work/install/x86_64-linux/ghc-8.0.2/8.0.2/doc/scientific-0.3.4.10
