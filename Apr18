- Abstract was accepted at Tufts undergrad symposium                          
- Data collection progress:
  - Nofib slowly coming together. Integrated pre-Autobahn, Autobahn, post-Autobahn 
    all in one (resolved package version issues). Made running experiments a lot smoother
    - Realized that Autobahn runtime doesn't depend on bit vector size!
    - Validate claim #1: 
      Pre-Autobahn stage significantly decreases bangs generated 
      while maintaning similar improvement
   - Finally hand traversed AST for aeson and got a list of pats. 
     Definitely missing some patterns...
     But can't bind bangs to them. 
  - Aeson's profile varies on size of input

- Outline:
Idea
  - Cost centers & Profiling
    - Definitions
    - CC bound by src locations
    - "Hot spot" = CC that takes up more than 6% of program run time (configurable)
    - Results of profiling is dependant on representative input (size or type)
    - Why this is important: tells us where we spend a lot of time on. Identifies
      locations worthy of optimizing (and locations that are not)
  - Genes & Chromosomes
    - Definitions
    - Represented by bit vector
    - Solution to problem: either eliminate useless bangs in bit vector 
                           or reduce size of bit vector prior to optimization
  - Coverage & Pre-Autobahn
    - Original Autobahn coverage: 
      restricted by individual files
      does not consider external libraries
      allows users to configure coverage, only if they know which files to optimize
    - Description of Pre-Profiling
    - Changes that Pre-Profiling offers:
      Automatically removes files that don't contain "hot spots"
      Identifies files unsuitable for optimization
      Suggests files to add for better performance
    - Purpose: refine search space. Limit size of bit vector such that it includes
               as many "hot spots" as possible.
  - Short description of how Autobahn works
  - Post-Autobahn algorithm:
    - Bit vector manipulation:
      0's immediately eliminated
      1's that are not "hot spots" immediately eliminated
      1's that are hot spots, turn off and test
        - If absence slows program by 5%, keep
        - If absence slows program by < 5%, eliminate
        - 5% is configurable
    - Winner: combination of leftover bangs

Implementation
  - Pseudocode?
  - Bit vector became (bit, srcLoc) vector
  - Hand traversed AST?
  
Evaluation

    Claim #1: Profiling feedback reduces search space by identifying which 
              internal files or external libraries do not need to be optimized. 
    Evidence #1: Run Autobahn on nofib once with search space reduction
                 and once without. 
                                     No. bangs
                 ----------------------------------------
                 No reduction      |
                 Yes reduction     | predicted decrease
    Claim #2: Profiling feedback identifies programs that are "unsuitable"
              for optimization by Autobahn, which occurs when all files in program
              are labelled as unsuitable for optimization.
    Evidence #2: Compile list of unsuitable nofib benchmarks. Compile list of 
                 benchmarks that consistently show low runtime improvement when
                 optimized by Autobahn over ten runs. Show intersection of these
                 two lists. (Predicted decent overlap)
    Claim #3: Profiling feedback expands search space by identifying external 
              files that may significantly improve Autobahn performance.
    Evidence #3: Aeson...
              
  Post-Autobahn
    Claim #4: Minimizing programs from the NoFib benchmark suite shows mean
              bang reductions of __% while maintaining similar runtime performance.
    Evidence #4: Run all categories of NoFib ten times, measure bang reduction and
                 corresponding runtime performance. 
                 Average fail/success rate
                    Fail -> 
                    Success -> average/max original/phase 1 runtime
                               average/max bang reduction and runtime performance
    Claim #5: Minimizing bangs from garbage collector simulator gcSimulator using
              small training data set can maintain similar runtime performance
              for larger data sets.
    Evidence #5: Run gcSim 1 time? 10 times?
                  For training data set, quarter trace, half trace, full trace:
                    Orig/hand/Autobahn/min no.bangs and runtime 
    Claim #6: Show that minimizing Aeson can preserve different annotations in
              bang reduction to produce optimal behavior in convert and validate.
    Evidence #6: Minimize Aeson...
